<?php

/**
 * @file
 * Culture frontend installation and uninstallation functionality.
 */

/**
 * Implements hook_field_schema().
 */
function culture_frontend_field_schema() {
  $columns = array(
    'lists_options' => array(
      'type' => 'blob',
      'not null' => FALSE,
      'serialize' => TRUE,
      'size' => 'big',
    ),
  );

  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_install().
 */
function culture_frontend_install() {
  // Make '/user/login' path to redirect to page instead of showing ding_popup.
  variable_set('ding_user_show_login_page', 1);
  if (!module_exists('ctools')) {
    module_enable(['ctools', 'page_manager', 'panels', 'node', 'i18n_string']);
  }
  _culture_frontend_place_pane();

  module_disable(array('ting_search_autocomplete'));
}

/**
 * Implements hook_uninstall().
 */
function culture_frontend_uninstall() {
  variable_del('ding_user_show_login_page');
}

/**
 * Place 'Quick buttons' pane.
 */
function culture_frontend_update_7001() {
  _culture_frontend_place_pane();
}

/**
 * Place and position 'Quick buttons' pane on ding_event list page.
 */
function _culture_frontend_place_pane() {
  ctools_include('plugins');
  ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

  $task = page_manager_get_task('page');
  $handlers = page_manager_load_task_handlers($task);
  $handler = $handlers['page_ding_events_panel_context'];

  // Load ding_event page display.
  $display = panels_panel_context_get_display($handler);

  // Load custom ctools plugin.
  $quick_buttons_pane = panels_new_pane('quick_buttons', 'quick_buttons', TRUE);

  // Mark if we shall add custom pane or no.
  $present = FALSE;
  foreach ($display->content as $did => $pane) {
    if ($pane->type == 'quick_buttons') {
      $present = TRUE;
    }
  }

  if (!$present) {
    // Add custom pane.
    $display->add_pane($quick_buttons_pane, 'main_content');

    // Save changed display.
    panels_save_display($display);
  }

  // Place new pane in correct position.
  $panes = db_select('panels_pane', 'pp')
    ->fields('pp', array('pid', 'panel', 'type', 'position'))
    ->condition('panel', 'main_content', '=')
    ->execute()
    ->fetchAll();

  foreach ($panes as $pane) {
    $i = 0;
    if ($pane->type == 'quick_buttons') {
      db_update('panels_pane')
        ->fields(array(
          'position' => 0,
        ))
        ->condition('pid', $pane->pid)
        ->execute();
    }
    else {
      db_update('panels_pane')
        ->fields(array(
          'position' => ++$i,
        ))
        ->condition('pid', $pane->pid)
        ->execute();
    }
  }
}

/**
 *  Changes type of `ding_event_price` field.
 */
function culture_frontend_update_7002() {
  $field_config = db_select('field_config', 'f')
    ->fields('f', array('data'))
    ->condition('f.field_name', 'field_ding_event_price')
    ->execute()
    ->fetchField();

  $field_config = unserialize($field_config);
  $field_config['settings']['max_length'] = 255;
  $field_config['foreign keys'] = array(
    'format' => array(
      'table' => 'filter_format',
      'columns' => array(
        'format' => 'format',
      ),
    ),
  );

  $field_config['indexes'] = array(
    'format' => array(
      0 => 'format',
    ),
  );

  $field_config = serialize($field_config);
  db_update('field_config')
    ->fields(array(
      'data' => $field_config,
      'type' => 'text',
      'module' => 'text',
    ))
    ->condition('field_name', 'field_ding_event_price')
    ->execute();

  $field_config_instance = db_select('field_config_instance', 'f')
    ->fields('f', array('data'))
    ->condition('f.field_name', 'field_ding_event_price')
    ->execute()
    ->fetchField();

  $field_config_instance = unserialize($field_config_instance);
  $field_config_instance['widget'] = array(
    'active' => 1,
    'module' => 'text',
    'settings' => array(
      'size' => 60,
    ),
    'type' => 'text_textfield',
    'weight' => 8,
  );

  $field_config_instance['display']['default'] = array(
    'label' => 'above',
    'module' => 'text',
    'settings' => array(),

    'type' => 'text_default',
    'weight' => 3,
  );

  $field_config_instance['settings'] = array(
    'text_processing' => "0",
    'user_register_form' => FALSE,
  );

  $field_config_instance['required'] = 1;
  $field_config_instance['description'] = t('Events show the value ”Free” if text field is set to 0.
Tip: Indicate different ticket prices for more than one audience group by entering a lowest – highest price in text field fx. “30 - 50”');

  $field_config_instance = serialize($field_config_instance);
  db_update('field_config_instance')
    ->fields(array(
      'data' => $field_config_instance,
    ))
    ->condition('field_name', 'field_ding_event_price')
    ->execute();

  $field = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => NULL,
  );
  db_change_field('field_data_field_ding_event_price', 'field_ding_event_price_value', 'field_ding_event_price_value', $field);
  db_change_field('field_revision_field_ding_event_price', 'field_ding_event_price_value', 'field_ding_event_price_value', $field);
  db_add_field('field_data_field_ding_event_price', 'field_ding_event_price_format', $field);
  db_add_field('field_revision_field_ding_event_price', 'field_ding_event_price_format', $field);
}

<?php

/**
 * @file
 * Code for the Culture frontend feature.
 */

include_once 'culture_frontend.features.inc';
include_once 'culture_frontend.fields.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function culture_frontend_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_menu().
 */
function culture_frontend_menu() {
  $item = array();

  $item['culture_events/%/autocomplete'] = array(
    'title' => 'Event nodes autocomplete',
    'page callback' => 'culture_frontend_events_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $item;
}

/**
 * Implements hook_form_alter().
 */
function culture_frontend_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['display']->id == 'ding_event_list') {
    $args = arg();

    // Process autocomplete for text field.
    if (!in_array('search', $args)) {
      $form['title']['#autocomplete_path'] = 'culture_events/list/autocomplete';
    }

    // Process "tommorow".
    $tomorrow = new DateTime('tomorrow');
    $form['tomorrow'] = array(
      '#prefix' => '<div class="events-tomorrow">',
      '#suffix' => '</div>',
      '#type' => 'container',
      'tommorow' => array(
        '#type' => 'link',
        '#title' => t('Events tomorrow'),
        '#href' => url('#'),
        '#attributes' => array(
          'id' => 'events-tomorrow',
          'class' => array(
            'btn',
            'btn-success',
          ),
        ),
        '#attached' => array(
          'js' => array(
            array(
              'data' => array(
                'culture_frontend' => array(
                  'tommorow' => array(
                    'date_start' => $tomorrow->format('d-m-Y'),
                    'date_end' => $tomorrow->format('d-m-Y'),
                  ),
                ),
              ),
              'type' => 'setting',
            ),
          ),
        ),
      ),
    );

    // Process "next weekend".
    $saturday = strtotime('saturday');
    $saturday = date('d-m-Y', $saturday);

    $sunday = strtotime('sunday');
    $sunday = date('d-m-Y', $sunday);

    $form['next-weekend'] = array(
      '#prefix' => '<div class="events-next_weekend">',
      '#suffix' => '</div>',
      '#type' => 'container',
      'tommorow' => array(
        '#type' => 'link',
        '#title' => t('Events next weekend'),
        '#href' => url('#'),
        '#attributes' => array(
          'id' => 'events-next_weekend',
          'class' => array(
            'btn',
            'btn-success',
          ),
        ),
        '#attached' => array(
          'js' => array(
            array(
              'data' => array(
                'culture_frontend' => array(
                  'next_weekend' => array(
                    'date_start' => $saturday,
                    'date_end' => $sunday,
                  ),
                ),
              ),
              'type' => 'setting',
            ),
          ),
        ),
      ),
    );

    // Process "top events (sticky)".
    $form['top-events'] = array(
      '#prefix' => '<div class="top_events">',
      '#suffix' => '</div>',
      '#type' => 'container',
      'tommorow' => array(
        '#type' => 'link',
        '#title' => t('Top events'),
        '#href' => url('#'),
        '#attributes' => array(
          'id' => 'events-top_events',
          'class' => array(
            'btn',
            'btn-success',
          ),
        ),
        '#attached' => array(
          'js' => array(
            array(
              'data' => array(
                'culture_frontend' => array(
                  'top_events' => array(
                    'today' => date('d-m-Y'),
                  ),
                ),
              ),
              'type' => 'setting',
            ),
          ),
        ),
      ),
    );

    // Alter node search exposed form.
    // Populate exposed search textfield.
    $args = arg();
    if ($args[0] == 'search') {
      if (!empty($args[2])) {
        $form['title']['#default_value'] = check_plain($args[2]);
        $form_state['input']['title'] = check_plain($args[2]);
      }

      $form['#submit'][] = '_culture_frontend_exposed_form_submit';
    }
  }
}

/**
 * Redirect on search exposed form submit.
 */
function _culture_frontend_exposed_form_submit(&$form, &$form_state) {
  $args = arg();
  if (!empty($_GET['title'])) {
    $args[2] = $_GET['title'];
    $_GET['q'] = implode('/', $args);

    $query = $_GET;
    unset($query['q']);
    unset($query['title']);

    drupal_goto($_GET['q'], array('query' => $query));
  }
}

/**
 * Implements hook_page_alter().
 */
function culture_frontend_page_alter(&$page) {
  $args = arg();
  if (count($args) == 1 && $args['0'] == 'arrangementer') {
    drupal_add_js(drupal_get_path('module', 'culture_frontend') . '/js/events.culture_frontend.js', 'file');
  }
}

/**
 * Autocomplete callback.
 *
 * @param string $string
 *   String to be searched in events.
 */
function culture_frontend_events_autocomplete($type, $string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('node')
      ->fields('node', array('nid', 'title'))
      ->condition('type', 'ding_event')
      ->condition('title', '%' . db_like($string) . '%', 'LIKE')
      ->condition('status', '1')
      ->range(0, 10)
      ->execute();
    foreach ($result as $node) {
      if ($type == 'list') {
        $matches[$node->title] = check_plain($node->title);
      }
      else {
        $matches[$node->title . ' [' . $node->nid . ']'] = check_plain($node->title . ' [' . $node->nid . ']');
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_views_post_render().
 */
function culture_frontend_views_post_render(&$view, &$output, &$cache) {
  if ($view->base_table == 'search_api_index_default_multiple_index') {

    // Filter events based on the exposed values.
    $result = $view->result;
    foreach ($result as $rid => $item) {
      $item_bundle = $item->_entity_properties['item_bundle'];
      $bundle = explode(':', $item_bundle)[1];
      if ($bundle == 'ding_event') {
        $node = node_load($item->_entity_properties['node']);
        if (!_culture_frontend_search_filter_events($node)) {
          unset($view->result[$rid]);
        }
      }
    }

    // Re-render output after results is altered. In order to escape post render
    // recursion call static function.
    $rendered = &drupal_static(__FUNCTION__);
    if (empty($rendered)) {
      $rendered = TRUE;
      $view->name = 'ding_multiple_search';
      $output = $view->preview();
    }
  }
}

/**
 * Filter events based on the exposed values.
 *
 * @param stdClass $node
 *   Node event object.
 *
 * @return bool
 *  If node passed all the checks then it can be displayed.
 */
function _culture_frontend_search_filter_events($node) {
  // Compare start dates.
  if (!empty($_GET['date']['value']['date'])) {
    $input_date = new DateTime($_GET['date']['value']['date']);
    $node_date = new DateTime($node->field_ding_event_date[LANGUAGE_NONE][0]['value']);
    $node_date->setTime(0, 0);

    if ($input_date > $node_date) {
      return FALSE;
    }
  }

  // Compare end dates.
  if (!empty($_GET['field_ding_event_date_value_1']['value']['date'])) {
    $input_date = new DateTime($_GET['field_ding_event_date_value_1']['value']['date']);
    $node_date = new DateTime($node->field_ding_event_date[LANGUAGE_NONE][0]['value']);
    $node_date->setTime(0, 0);

    if ($input_date < $node_date) {
      return FALSE;
    }
  }

  // Compare event categories.
  if (!empty($_GET['field_ding_event_category_tid'])) {
    if (!in_array($node->field_ding_event_category[LANGUAGE_NONE][0]['tid'], $_GET['field_ding_event_category_tid'])) {
      return FALSE;
    }
  }

  // Compare libraries.
  if (!empty($_GET['og_group_ref_target_id_entityreference_filter'])) {
    if (!in_array($node->og_group_ref[LANGUAGE_NONE][0]['target_id'], $_GET['og_group_ref_target_id_entityreference_filter'])) {
      return FALSE;
    }
  }

  // Compare event targets.
  if (!empty($_GET['field_ding_event_target_tid'])) {
    if (!in_array($node->field_ding_event_target[LANGUAGE_NONE][0]['tid'], $_GET['field_ding_event_target_tid'])) {
      return FALSE;
    }
  }

  // Filter sticky events.
  if (isset($_GET['sticky'])) {
    if ($_GET['sticky'] != $node->sticky && $_GET['sticky'] != 'All') {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_theme().
 */
function culture_frontend_theme($existing, $type, $theme, $path) {
  return array(
    'manually_multifield_dragandrop' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Transform passed field into multifield widget.
 *
 * @param array $parents
 *   Array with preocessed field path.
 * @param array $form
 *   Form structure.
 * @param array $form_state
 *   Form state values.
 */
function culture_frontend_multifield($parents, &$form, &$form_state) {
  $field = drupal_array_get_nested_value($form, $parents);

  $element_name = end($parents);

  $fieldset_id = "fieldset_multifield_$element_name";

  $form_state['culture_frontend_multifield'][$element_name]['parents'] = $parents;

  $form_chunk[$fieldset_id] = array(
    '#type'   => 'fieldset',
    '#prefix' => '<div id="' . $fieldset_id . '">',
    '#suffix' => '</div>',
    '#states' => array(
      "visible" => array(
        ":input[name='field_culture_lists_control[und][0][wrapper][lists_options][manually][check]']" => array("checked" => TRUE),
      ),
    ),
  );

  $additional_properties = array(
    '#title' => '',
    '#description' => '',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  foreach ($additional_properties as $property => $default_value) {
    if (isset($field[$property])) {
      $form_chunk[$fieldset_id][$property] = $field[$property];
      unset($field[$property]);
    }
    else {
      $form_chunk[$fieldset_id][$property] = $default_value;
    }
  }

  if (empty($form_state['culture_frontend_multifield'][$element_name]['fields_number'])) {
    $fields_number = count($field['#default_values']) > $field['#number'] ? count($field['#default_values']) : $field['#number'];
    $form_state['culture_frontend_multifield'][$element_name]['fields_number'] = $fields_number;
  }

  $field_name = "multifield_$element_name";
  for ($i = 0; $i < $form_state['culture_frontend_multifield'][$element_name]['fields_number']; $i++) {
    $form_chunk[$fieldset_id][$field_name][$i]['value'] = $field;
    $form_chunk[$fieldset_id][$field_name][$i]['value']['#default_value'] = isset($field['#default_values'][$i]) ? $field['#default_values'][$i] : '';
    $form_chunk[$fieldset_id][$field_name][$i]['weight'] = array(
      '#type'          => 'weight',
      '#title'         => t('Weight'),
      '#default_value' => $i,
      '#title-display' => 'invisible',
      '#attributes' => array('class' => array('culture-frontend-multifield-item-weight')),
    );
  }
  $form_chunk[$fieldset_id][$field_name]['#tree'] = TRUE;
  $form_chunk[$fieldset_id][$field_name]['#theme'] = 'manually_multifield_dragandrop';
  if ($field['#add_more']) {
    $form_chunk[$fieldset_id]["culture_frontend_multifield_add_more"] = array(
      '#element_name' => $element_name,
      '#type' => 'submit',
      '#value' => t('Add one more'),
      '#name' => "culture_frontend_multifield_add_more_$element_name",
      '#submit' => array("culture_frontend_multifield_submit_add_more"),
      '#limit_validation_errors' => array(array($fieldset_id, $element_name)),
      '#ajax' => array(
        'callback' => 'culture_frontend_multifield_ajax',
        'wrapper' => $fieldset_id,
      ),
    );

    if ($form_state['culture_frontend_multifield'][$element_name]['fields_number'] > 1) {
      $form_chunk[$fieldset_id]["culture_frontend_multifield_remove_one"] = array(
        '#element_name' => $element_name,
        '#type' => 'submit',
        '#value' => t('Remove one'),
        '#name' => "culture_frontend_multifield_remove_one_$element_name",
        '#submit' => array('culture_frontend_multifield_submit_remove_one'),
        '#limit_validation_errors' => array(array($fieldset_id, $element_name)),
        '#ajax' => array(
          'callback' => 'culture_frontend_multifield_ajax',
          'wrapper' => $fieldset_id,
        ),
      );
    }
  }

  drupal_array_set_nested_value($form, $parents, $form_chunk);
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function culture_frontend_multifield_submit_add_more($form, &$form_state) {
  $element_name = $form_state['triggering_element']['#element_name'];
  $form_state['culture_frontend_multifield'][$element_name]['fields_number']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function culture_frontend_multifield_submit_remove_one($form, &$form_state) {
  $element_name = $form_state['triggering_element']['#element_name'];
  if ($form_state['culture_frontend_multifield'][$element_name]['fields_number']) {
    $form_state['culture_frontend_multifield'][$element_name]['fields_number']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Return portion of the form to rebuild, with added or removed fields.
 */
function culture_frontend_multifield_ajax($form, $form_state) {
  $element_name = $form_state['triggering_element']['#element_name'];
  $parents = $form_state['culture_frontend_multifield'][$element_name]['parents'];
  $output = drupal_array_get_nested_value($form, $parents);
  return $output;
}

/**
 * Theme for make our multifield draggable.
 *
 * @throws \Exception
 */
function theme_manually_multifield_dragandrop($variables) {
  $element = $variables['element'];
  $output = '';
  $rows = array();

  foreach (element_children($element) as $id) {
    $rows[$id]['data'][] = drupal_render($element[$id]['value']);
    $rows[$id]['data'][] = drupal_render($element[$id]['weight']);
    $rows[$id]['class'][] = 'draggable';
  }

  $header = array(t('title'), t('Weight'));
  $table_id = 'culture-frontend-table_' . $element['#id'];

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));

  $output .= drupal_render_children($element);

  drupal_add_tabledrag($table_id, 'order', 'sibling', 'culture-frontend-multifield-item-weight');

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function culture_frontend_form_ding_event_node_form_alter(&$form, &$form_state, $form_id) {
  culture_frontend_multifield(array(
    'field_culture_lists_control',
    'und',
    '0',
    'wrapper',
    'lists_options',
    'manually',
    'nids',
  ), $form, $form_state);
}

/**
 * Implements hook_views_query_alter().
 */
function culture_frontend_views_query_alter(&$view, &$query) {
  if ($view->name == 'culture_events' && $view->current_display == 'culture_events_day') {
    $nid = arg(1);
    if (is_int($nid)) {
      $node = node_load($nid);

      $current_node_date_value = $node->field_ding_event_date['und'][0]['value'];
      $date_object = DateTime::createFromFormat('Y-m-d H:i:s', $current_node_date_value);
      $current_node_date = $date_object->format('Y-m-d');

      if ($current_node_date >= date('Y-m-d')) {
        $queried_date = $current_node_date;
      }
      else {
        $queried_date = date('Y-m-d');
      }

      $date_condition = array(
        'field' => "DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value, SEC_TO_TIME(7200)), '%Y-%m-%d') <= :node_between_date_filter AND DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value2, SEC_TO_TIME(7200)), '%Y-%m-%d') >= :node_between_date_filter",
        'value' => array(
          ':node_between_date_filter' => $queried_date,
        ),
        'operator' => 'formula',
      );

      // Condition for fetching events with same date as parent node.
      $query->where[1]['conditions'][] = $date_condition;
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function culture_frontend_node_view_alter(&$build) {
  if ($build['#view_mode'] == 'teaser') {
    $build['#node']->content = array();
  }
}
